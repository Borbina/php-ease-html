<?php

namespace Test\Ease;

use Ease\Document;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-17 at 23:58:37.
 */
class PageTest extends ContainerTest
{
    /**
     * @var Document
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new Document();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
        
    }

    /**
     * @covers Ease\Document::singleton
     */
    public function testSingleton()
    {
        if (get_class($this->object) == 'Ease\Document') {
            $this->assertInstanceOf(get_class($this->object), Document::singleton());
        }
    }

    /**
     * @covers Ease\Document::addJavaScript
     */
    public function testAddJavaScript()
    {
        $this->object->addJavaScript('alert("hallo");');
        $this->object->addJavaScript('alert("world");', false);
    }

    /**
     * @covers Ease\Document::includeJavaScript
     */
    public function testIncludeJavaScript()
    {
        $this->object->includeJavaScript('test.js');
    }

    /**
     * @covers Ease\Document::addCSS
     */
    public function testAddCSS()
    {
        $this->object->addCSS('.test {color:red;}');
    }

    /**
     * @covers Ease\Document::includeCss
     */
    public function testIncludeCss()
    {
        $this->object->includeCss('test.css');
    }

    /**
     * @covers Ease\Document::redirect
     */
    public function testRedirect()
    {
        $this->object->redirect('http://v.s.cz/');
    }

    /**
     * @covers Ease\Document::getUri
     */
    public function testGetUri()
    {
        $_SERVER['REQUEST_URI'] = 'test';
        Document::getUri();
    }

    /**
     * @covers Ease\Document::phpSelf
     */
    public function testPhpSelf()
    {
        Document::phpSelf();
    }

    /**
     * @covers Ease\Document::onlyForLogged
     */
    public function testOnlyForLogged()
    {
        $this->object->onlyForLogged();
    }

    /**
     * @covers Ease\Document::getRequestValues
     */
    public function testGetRequestValues()
    {
        $this->object->getRequestValues();
    }

    /**
     * @covers Ease\Document::isPosted
     */
    public function testIsPosted()
    {
        $_SERVER['REQUEST_METHOD'] = 'test';
        $this->assertFalse(\Ease\Document::isPosted());
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $this->assertTrue(\Ease\Document::isPosted());
    }

    /**
     * @covers Ease\Document::sanitizeAsType
     */
    public function testSanitizeAsType()
    {
        $this->assertInternalType('string',
            $this->object->sanitizeAsType('123', 'string'));
        $this->assertInternalType('integer',
            $this->object->sanitizeAsType('123', 'int'));
        $this->assertInternalType('boolean',
            $this->object->sanitizeAsType('0', 'boolean'));
        $this->assertFalse($this->object->sanitizeAsType('FALSE', 'boolean'));
        $this->assertTrue($this->object->sanitizeAsType('true', 'boolean'));
        $this->assertInternalType('float',
            $this->object->sanitizeAsType('1.45', 'float'));
        $this->assertNull($this->object->sanitizeAsType('', 'int'));
        $this->assertEquals('test', $this->object->sanitizeAsType('test', 'null'));
    }

    /**
     * @covers Ease\Document::getRequestValue
     */
    public function testGetRequestValue()
    {
        $_REQUEST['test'] = 'lala';
        $this->assertEquals('lala', $this->object->getRequestValue('test'));
    }

    /**
     * @covers Ease\Document::getGetValue
     */
    public function testGetGetValue()
    {
        $_GET['test'] = 'lolo';
        $this->assertEquals('lolo', $this->object->getGetValue('test'));
    }

    /**
     * @covers Ease\Document::getPostValue
     */
    public function testGetPostValue()
    {
        $_POST['test'] = 'lili';
        $this->assertEquals('lili', $this->object->getPostValue('test'));
    }

    /**
     * @covers Ease\Document::isFormPosted
     */
    public function testIsFormPosted()
    {
        unset($_POST);
        $this->assertFalse($this->object->isFormPosted());
        $_POST['test'] = 'lili';
        $this->assertTrue($this->object->isFormPosted());
    }

    /**
     * @covers Ease\Document::setOutputFormat
     */
    public function testSetOutputFormat()
    {
        $this->object->setOutputFormat('html');
    }

    /**
     * @covers Ease\Document::getOutputFormat
     */
    public function testGetOutputFormat()
    {
        $this->object->getOutputFormat();
    }

    /**
     * @covers Ease\Document::takeStatusMessages
     */
    public function testTakeStatusMessages()
    {
        $this->object->takeStatusMessages(['info' => ['test', 'test2']]);
    }

    /**
     * @covers Ease\Document::arrayToUrlParams
     */
    public function testArrayToUrlParams()
    {
        $this->object->arrayToUrlParams(['a' => 1, 'b' => 2], 'http://v.s.cz/');
    }

    /**
     * @covers Ease\Document::addItem
     */
    public function testAddItem()
    {
        $items1                   = $this->object->getItemsCount();
        $this->object->addItem(new \Ease\Html\DivTag('test'));
        $items2                   = $this->object->getItemsCount();
        $this->assertEquals($items1 + 1, $items2);
        $this->object->pageClosed = true;
        $this->object->addItem(new \Ease\Html\DivTag('test'));
        $items3                   = $this->object->getItemsCount();
        $this->assertEquals($items3, $items2);
    }
    
    /**
     * @covers Ease\Shared::registerItem
     */
    public function testRegisterItem()
    {
        $item = new \Ease\Html\ATag('#');
        Shared::registerItem($item);
        $this->assertInstanceOf(get_class($item), end($this->object->allItems));
    }
    
}
